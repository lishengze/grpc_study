// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: test.proto
#ifndef GRPC_test_2eproto__INCLUDED
#define GRPC_test_2eproto__INCLUDED

#include "test.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace TestPackage {

class TestStream final {
 public:
  static constexpr char const* service_full_name() {
    return "TestPackage.TestStream";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status TestSimple(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::TestPackage::TestResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TestPackage::TestResponse>> AsyncTestSimple(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TestPackage::TestResponse>>(AsyncTestSimpleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TestPackage::TestResponse>> PrepareAsyncTestSimple(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TestPackage::TestResponse>>(PrepareAsyncTestSimpleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::TestPackage::TestRequest>> TestClientStream(::grpc::ClientContext* context, ::TestPackage::TestResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::TestPackage::TestRequest>>(TestClientStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::TestPackage::TestRequest>> AsyncTestClientStream(::grpc::ClientContext* context, ::TestPackage::TestResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::TestPackage::TestRequest>>(AsyncTestClientStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::TestPackage::TestRequest>> PrepareAsyncTestClientStream(::grpc::ClientContext* context, ::TestPackage::TestResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::TestPackage::TestRequest>>(PrepareAsyncTestClientStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::TestPackage::TestResponse>> TestServerStream(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::TestPackage::TestResponse>>(TestServerStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TestPackage::TestResponse>> AsyncTestServerStream(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TestPackage::TestResponse>>(AsyncTestServerStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TestPackage::TestResponse>> PrepareAsyncTestServerStream(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TestPackage::TestResponse>>(PrepareAsyncTestServerStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> TestDoubleStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(TestDoubleStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> AsyncTestDoubleStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(AsyncTestDoubleStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> PrepareAsyncTestDoubleStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(PrepareAsyncTestDoubleStreamRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> ServerStreamApple(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(ServerStreamAppleRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> AsyncServerStreamApple(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(AsyncServerStreamAppleRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> PrepareAsyncServerStreamApple(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(PrepareAsyncServerStreamAppleRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::TestPackage::TestResponse>> ServerStreamPear(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::TestPackage::TestResponse>>(ServerStreamPearRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TestPackage::TestResponse>> AsyncServerStreamPear(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TestPackage::TestResponse>>(AsyncServerStreamPearRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TestPackage::TestResponse>> PrepareAsyncServerStreamPear(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TestPackage::TestResponse>>(PrepareAsyncServerStreamPearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::TestPackage::TestResponse>> ServerStreamMango(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::TestPackage::TestResponse>>(ServerStreamMangoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TestPackage::TestResponse>> AsyncServerStreamMango(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TestPackage::TestResponse>>(AsyncServerStreamMangoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TestPackage::TestResponse>> PrepareAsyncServerStreamMango(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::TestPackage::TestResponse>>(PrepareAsyncServerStreamMangoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> DoubleStreamApple(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(DoubleStreamAppleRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> AsyncDoubleStreamApple(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(AsyncDoubleStreamAppleRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> PrepareAsyncDoubleStreamApple(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(PrepareAsyncDoubleStreamAppleRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> DoubleStreamPear(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(DoubleStreamPearRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> AsyncDoubleStreamPear(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(AsyncDoubleStreamPearRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> PrepareAsyncDoubleStreamPear(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(PrepareAsyncDoubleStreamPearRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> DoubleStreamMango(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(DoubleStreamMangoRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> AsyncDoubleStreamMango(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(AsyncDoubleStreamMangoRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> PrepareAsyncDoubleStreamMango(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(PrepareAsyncDoubleStreamMangoRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void TestSimple(::grpc::ClientContext* context, const ::TestPackage::TestRequest* request, ::TestPackage::TestResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TestSimple(::grpc::ClientContext* context, const ::TestPackage::TestRequest* request, ::TestPackage::TestResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TestSimple(::grpc::ClientContext* context, const ::TestPackage::TestRequest* request, ::TestPackage::TestResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TestClientStream(::grpc::ClientContext* context, ::TestPackage::TestResponse* response, ::grpc::ClientWriteReactor< ::TestPackage::TestRequest>* reactor) = 0;
      #else
      virtual void TestClientStream(::grpc::ClientContext* context, ::TestPackage::TestResponse* response, ::grpc::experimental::ClientWriteReactor< ::TestPackage::TestRequest>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TestServerStream(::grpc::ClientContext* context, ::TestPackage::TestRequest* request, ::grpc::ClientReadReactor< ::TestPackage::TestResponse>* reactor) = 0;
      #else
      virtual void TestServerStream(::grpc::ClientContext* context, ::TestPackage::TestRequest* request, ::grpc::experimental::ClientReadReactor< ::TestPackage::TestResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TestDoubleStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) = 0;
      #else
      virtual void TestDoubleStream(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ServerStreamApple(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) = 0;
      #else
      virtual void ServerStreamApple(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ServerStreamPear(::grpc::ClientContext* context, ::TestPackage::TestRequest* request, ::grpc::ClientReadReactor< ::TestPackage::TestResponse>* reactor) = 0;
      #else
      virtual void ServerStreamPear(::grpc::ClientContext* context, ::TestPackage::TestRequest* request, ::grpc::experimental::ClientReadReactor< ::TestPackage::TestResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ServerStreamMango(::grpc::ClientContext* context, ::TestPackage::TestRequest* request, ::grpc::ClientReadReactor< ::TestPackage::TestResponse>* reactor) = 0;
      #else
      virtual void ServerStreamMango(::grpc::ClientContext* context, ::TestPackage::TestRequest* request, ::grpc::experimental::ClientReadReactor< ::TestPackage::TestResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoubleStreamApple(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) = 0;
      #else
      virtual void DoubleStreamApple(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoubleStreamPear(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) = 0;
      #else
      virtual void DoubleStreamPear(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoubleStreamMango(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) = 0;
      #else
      virtual void DoubleStreamMango(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TestPackage::TestResponse>* AsyncTestSimpleRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TestPackage::TestResponse>* PrepareAsyncTestSimpleRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::TestPackage::TestRequest>* TestClientStreamRaw(::grpc::ClientContext* context, ::TestPackage::TestResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::TestPackage::TestRequest>* AsyncTestClientStreamRaw(::grpc::ClientContext* context, ::TestPackage::TestResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::TestPackage::TestRequest>* PrepareAsyncTestClientStreamRaw(::grpc::ClientContext* context, ::TestPackage::TestResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::TestPackage::TestResponse>* TestServerStreamRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TestPackage::TestResponse>* AsyncTestServerStreamRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TestPackage::TestResponse>* PrepareAsyncTestServerStreamRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* TestDoubleStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* AsyncTestDoubleStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* PrepareAsyncTestDoubleStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* ServerStreamAppleRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* AsyncServerStreamAppleRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* PrepareAsyncServerStreamAppleRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::TestPackage::TestResponse>* ServerStreamPearRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TestPackage::TestResponse>* AsyncServerStreamPearRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TestPackage::TestResponse>* PrepareAsyncServerStreamPearRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::TestPackage::TestResponse>* ServerStreamMangoRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TestPackage::TestResponse>* AsyncServerStreamMangoRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::TestPackage::TestResponse>* PrepareAsyncServerStreamMangoRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* DoubleStreamAppleRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* AsyncDoubleStreamAppleRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* PrepareAsyncDoubleStreamAppleRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* DoubleStreamPearRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* AsyncDoubleStreamPearRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* PrepareAsyncDoubleStreamPearRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* DoubleStreamMangoRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* AsyncDoubleStreamMangoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* PrepareAsyncDoubleStreamMangoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status TestSimple(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::TestPackage::TestResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TestPackage::TestResponse>> AsyncTestSimple(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TestPackage::TestResponse>>(AsyncTestSimpleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TestPackage::TestResponse>> PrepareAsyncTestSimple(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TestPackage::TestResponse>>(PrepareAsyncTestSimpleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::TestPackage::TestRequest>> TestClientStream(::grpc::ClientContext* context, ::TestPackage::TestResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::TestPackage::TestRequest>>(TestClientStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::TestPackage::TestRequest>> AsyncTestClientStream(::grpc::ClientContext* context, ::TestPackage::TestResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::TestPackage::TestRequest>>(AsyncTestClientStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::TestPackage::TestRequest>> PrepareAsyncTestClientStream(::grpc::ClientContext* context, ::TestPackage::TestResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::TestPackage::TestRequest>>(PrepareAsyncTestClientStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::TestPackage::TestResponse>> TestServerStream(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::TestPackage::TestResponse>>(TestServerStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TestPackage::TestResponse>> AsyncTestServerStream(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TestPackage::TestResponse>>(AsyncTestServerStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TestPackage::TestResponse>> PrepareAsyncTestServerStream(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TestPackage::TestResponse>>(PrepareAsyncTestServerStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> TestDoubleStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(TestDoubleStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> AsyncTestDoubleStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(AsyncTestDoubleStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> PrepareAsyncTestDoubleStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(PrepareAsyncTestDoubleStreamRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> ServerStreamApple(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(ServerStreamAppleRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> AsyncServerStreamApple(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(AsyncServerStreamAppleRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> PrepareAsyncServerStreamApple(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(PrepareAsyncServerStreamAppleRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::TestPackage::TestResponse>> ServerStreamPear(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::TestPackage::TestResponse>>(ServerStreamPearRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TestPackage::TestResponse>> AsyncServerStreamPear(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TestPackage::TestResponse>>(AsyncServerStreamPearRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TestPackage::TestResponse>> PrepareAsyncServerStreamPear(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TestPackage::TestResponse>>(PrepareAsyncServerStreamPearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::TestPackage::TestResponse>> ServerStreamMango(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::TestPackage::TestResponse>>(ServerStreamMangoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TestPackage::TestResponse>> AsyncServerStreamMango(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TestPackage::TestResponse>>(AsyncServerStreamMangoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::TestPackage::TestResponse>> PrepareAsyncServerStreamMango(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::TestPackage::TestResponse>>(PrepareAsyncServerStreamMangoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> DoubleStreamApple(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(DoubleStreamAppleRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> AsyncDoubleStreamApple(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(AsyncDoubleStreamAppleRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> PrepareAsyncDoubleStreamApple(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(PrepareAsyncDoubleStreamAppleRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> DoubleStreamPear(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(DoubleStreamPearRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> AsyncDoubleStreamPear(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(AsyncDoubleStreamPearRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> PrepareAsyncDoubleStreamPear(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(PrepareAsyncDoubleStreamPearRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> DoubleStreamMango(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(DoubleStreamMangoRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> AsyncDoubleStreamMango(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(AsyncDoubleStreamMangoRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>> PrepareAsyncDoubleStreamMango(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>>(PrepareAsyncDoubleStreamMangoRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void TestSimple(::grpc::ClientContext* context, const ::TestPackage::TestRequest* request, ::TestPackage::TestResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TestSimple(::grpc::ClientContext* context, const ::TestPackage::TestRequest* request, ::TestPackage::TestResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TestSimple(::grpc::ClientContext* context, const ::TestPackage::TestRequest* request, ::TestPackage::TestResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TestClientStream(::grpc::ClientContext* context, ::TestPackage::TestResponse* response, ::grpc::ClientWriteReactor< ::TestPackage::TestRequest>* reactor) override;
      #else
      void TestClientStream(::grpc::ClientContext* context, ::TestPackage::TestResponse* response, ::grpc::experimental::ClientWriteReactor< ::TestPackage::TestRequest>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TestServerStream(::grpc::ClientContext* context, ::TestPackage::TestRequest* request, ::grpc::ClientReadReactor< ::TestPackage::TestResponse>* reactor) override;
      #else
      void TestServerStream(::grpc::ClientContext* context, ::TestPackage::TestRequest* request, ::grpc::experimental::ClientReadReactor< ::TestPackage::TestResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TestDoubleStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) override;
      #else
      void TestDoubleStream(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ServerStreamApple(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) override;
      #else
      void ServerStreamApple(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ServerStreamPear(::grpc::ClientContext* context, ::TestPackage::TestRequest* request, ::grpc::ClientReadReactor< ::TestPackage::TestResponse>* reactor) override;
      #else
      void ServerStreamPear(::grpc::ClientContext* context, ::TestPackage::TestRequest* request, ::grpc::experimental::ClientReadReactor< ::TestPackage::TestResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ServerStreamMango(::grpc::ClientContext* context, ::TestPackage::TestRequest* request, ::grpc::ClientReadReactor< ::TestPackage::TestResponse>* reactor) override;
      #else
      void ServerStreamMango(::grpc::ClientContext* context, ::TestPackage::TestRequest* request, ::grpc::experimental::ClientReadReactor< ::TestPackage::TestResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoubleStreamApple(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) override;
      #else
      void DoubleStreamApple(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoubleStreamPear(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) override;
      #else
      void DoubleStreamPear(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoubleStreamMango(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) override;
      #else
      void DoubleStreamMango(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::TestPackage::TestRequest,::TestPackage::TestResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::TestPackage::TestResponse>* AsyncTestSimpleRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TestPackage::TestResponse>* PrepareAsyncTestSimpleRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::TestPackage::TestRequest>* TestClientStreamRaw(::grpc::ClientContext* context, ::TestPackage::TestResponse* response) override;
    ::grpc::ClientAsyncWriter< ::TestPackage::TestRequest>* AsyncTestClientStreamRaw(::grpc::ClientContext* context, ::TestPackage::TestResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::TestPackage::TestRequest>* PrepareAsyncTestClientStreamRaw(::grpc::ClientContext* context, ::TestPackage::TestResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::TestPackage::TestResponse>* TestServerStreamRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request) override;
    ::grpc::ClientAsyncReader< ::TestPackage::TestResponse>* AsyncTestServerStreamRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::TestPackage::TestResponse>* PrepareAsyncTestServerStreamRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* TestDoubleStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* AsyncTestDoubleStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* PrepareAsyncTestDoubleStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* ServerStreamAppleRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* AsyncServerStreamAppleRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* PrepareAsyncServerStreamAppleRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::TestPackage::TestResponse>* ServerStreamPearRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request) override;
    ::grpc::ClientAsyncReader< ::TestPackage::TestResponse>* AsyncServerStreamPearRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::TestPackage::TestResponse>* PrepareAsyncServerStreamPearRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::TestPackage::TestResponse>* ServerStreamMangoRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request) override;
    ::grpc::ClientAsyncReader< ::TestPackage::TestResponse>* AsyncServerStreamMangoRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::TestPackage::TestResponse>* PrepareAsyncServerStreamMangoRaw(::grpc::ClientContext* context, const ::TestPackage::TestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* DoubleStreamAppleRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* AsyncDoubleStreamAppleRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* PrepareAsyncDoubleStreamAppleRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* DoubleStreamPearRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* AsyncDoubleStreamPearRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* PrepareAsyncDoubleStreamPearRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* DoubleStreamMangoRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* AsyncDoubleStreamMangoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* PrepareAsyncDoubleStreamMangoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_TestSimple_;
    const ::grpc::internal::RpcMethod rpcmethod_TestClientStream_;
    const ::grpc::internal::RpcMethod rpcmethod_TestServerStream_;
    const ::grpc::internal::RpcMethod rpcmethod_TestDoubleStream_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerStreamApple_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerStreamPear_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerStreamMango_;
    const ::grpc::internal::RpcMethod rpcmethod_DoubleStreamApple_;
    const ::grpc::internal::RpcMethod rpcmethod_DoubleStreamPear_;
    const ::grpc::internal::RpcMethod rpcmethod_DoubleStreamMango_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status TestSimple(::grpc::ServerContext* context, const ::TestPackage::TestRequest* request, ::TestPackage::TestResponse* response);
    virtual ::grpc::Status TestClientStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::TestPackage::TestRequest>* reader, ::TestPackage::TestResponse* response);
    virtual ::grpc::Status TestServerStream(::grpc::ServerContext* context, const ::TestPackage::TestRequest* request, ::grpc::ServerWriter< ::TestPackage::TestResponse>* writer);
    virtual ::grpc::Status TestDoubleStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* stream);
    virtual ::grpc::Status ServerStreamApple(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* stream);
    virtual ::grpc::Status ServerStreamPear(::grpc::ServerContext* context, const ::TestPackage::TestRequest* request, ::grpc::ServerWriter< ::TestPackage::TestResponse>* writer);
    virtual ::grpc::Status ServerStreamMango(::grpc::ServerContext* context, const ::TestPackage::TestRequest* request, ::grpc::ServerWriter< ::TestPackage::TestResponse>* writer);
    virtual ::grpc::Status DoubleStreamApple(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* stream);
    virtual ::grpc::Status DoubleStreamPear(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* stream);
    virtual ::grpc::Status DoubleStreamMango(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_TestSimple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TestSimple() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_TestSimple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestSimple(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::TestPackage::TestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestSimple(::grpc::ServerContext* context, ::TestPackage::TestRequest* request, ::grpc::ServerAsyncResponseWriter< ::TestPackage::TestResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TestClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TestClientStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_TestClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestClientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::TestPackage::TestRequest>* /*reader*/, ::TestPackage::TestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestClientStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TestServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TestServerStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_TestServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestServerStream(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::grpc::ServerWriter< ::TestPackage::TestResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestServerStream(::grpc::ServerContext* context, ::TestPackage::TestRequest* request, ::grpc::ServerAsyncWriter< ::TestPackage::TestResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TestDoubleStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TestDoubleStream() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_TestDoubleStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestDoubleStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestDoubleStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerStreamApple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerStreamApple() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ServerStreamApple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamApple(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStreamApple(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerStreamPear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerStreamPear() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ServerStreamPear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamPear(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::grpc::ServerWriter< ::TestPackage::TestResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStreamPear(::grpc::ServerContext* context, ::TestPackage::TestRequest* request, ::grpc::ServerAsyncWriter< ::TestPackage::TestResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerStreamMango : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerStreamMango() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ServerStreamMango() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamMango(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::grpc::ServerWriter< ::TestPackage::TestResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStreamMango(::grpc::ServerContext* context, ::TestPackage::TestRequest* request, ::grpc::ServerAsyncWriter< ::TestPackage::TestResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoubleStreamApple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoubleStreamApple() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DoubleStreamApple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoubleStreamApple(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoubleStreamApple(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(7, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoubleStreamPear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoubleStreamPear() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DoubleStreamPear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoubleStreamPear(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoubleStreamPear(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(8, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoubleStreamMango : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoubleStreamMango() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_DoubleStreamMango() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoubleStreamMango(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoubleStreamMango(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(9, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_TestSimple<WithAsyncMethod_TestClientStream<WithAsyncMethod_TestServerStream<WithAsyncMethod_TestDoubleStream<WithAsyncMethod_ServerStreamApple<WithAsyncMethod_ServerStreamPear<WithAsyncMethod_ServerStreamMango<WithAsyncMethod_DoubleStreamApple<WithAsyncMethod_DoubleStreamPear<WithAsyncMethod_DoubleStreamMango<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TestSimple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TestSimple() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::TestPackage::TestRequest, ::TestPackage::TestResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::TestPackage::TestRequest* request, ::TestPackage::TestResponse* response) { return this->TestSimple(context, request, response); }));}
    void SetMessageAllocatorFor_TestSimple(
        ::grpc::experimental::MessageAllocator< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TestPackage::TestRequest, ::TestPackage::TestResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TestSimple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestSimple(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::TestPackage::TestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TestSimple(
      ::grpc::CallbackServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::TestPackage::TestResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TestSimple(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::TestPackage::TestResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TestClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TestClientStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::TestPackage::TestRequest, ::TestPackage::TestResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::TestPackage::TestResponse* response) { return this->TestClientStream(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_TestClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestClientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::TestPackage::TestRequest>* /*reader*/, ::TestPackage::TestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::TestPackage::TestRequest>* TestClientStream(
      ::grpc::CallbackServerContext* /*context*/, ::TestPackage::TestResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::TestPackage::TestRequest>* TestClientStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::TestPackage::TestResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TestServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TestServerStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::TestPackage::TestRequest, ::TestPackage::TestResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::TestPackage::TestRequest* request) { return this->TestServerStream(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_TestServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestServerStream(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::grpc::ServerWriter< ::TestPackage::TestResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::TestPackage::TestResponse>* TestServerStream(
      ::grpc::CallbackServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::TestPackage::TestResponse>* TestServerStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TestDoubleStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TestDoubleStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::TestPackage::TestRequest, ::TestPackage::TestResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->TestDoubleStream(context); }));
    }
    ~ExperimentalWithCallbackMethod_TestDoubleStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestDoubleStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* TestDoubleStream(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* TestDoubleStream(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ServerStreamApple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ServerStreamApple() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackBidiHandler< ::TestPackage::TestRequest, ::TestPackage::TestResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->ServerStreamApple(context); }));
    }
    ~ExperimentalWithCallbackMethod_ServerStreamApple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamApple(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* ServerStreamApple(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* ServerStreamApple(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ServerStreamPear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ServerStreamPear() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::TestPackage::TestRequest, ::TestPackage::TestResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::TestPackage::TestRequest* request) { return this->ServerStreamPear(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_ServerStreamPear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamPear(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::grpc::ServerWriter< ::TestPackage::TestResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::TestPackage::TestResponse>* ServerStreamPear(
      ::grpc::CallbackServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::TestPackage::TestResponse>* ServerStreamPear(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ServerStreamMango : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ServerStreamMango() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::TestPackage::TestRequest, ::TestPackage::TestResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::TestPackage::TestRequest* request) { return this->ServerStreamMango(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_ServerStreamMango() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamMango(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::grpc::ServerWriter< ::TestPackage::TestResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::TestPackage::TestResponse>* ServerStreamMango(
      ::grpc::CallbackServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::TestPackage::TestResponse>* ServerStreamMango(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoubleStreamApple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoubleStreamApple() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackBidiHandler< ::TestPackage::TestRequest, ::TestPackage::TestResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->DoubleStreamApple(context); }));
    }
    ~ExperimentalWithCallbackMethod_DoubleStreamApple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoubleStreamApple(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* DoubleStreamApple(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* DoubleStreamApple(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoubleStreamPear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoubleStreamPear() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackBidiHandler< ::TestPackage::TestRequest, ::TestPackage::TestResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->DoubleStreamPear(context); }));
    }
    ~ExperimentalWithCallbackMethod_DoubleStreamPear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoubleStreamPear(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* DoubleStreamPear(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* DoubleStreamPear(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoubleStreamMango : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoubleStreamMango() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackBidiHandler< ::TestPackage::TestRequest, ::TestPackage::TestResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->DoubleStreamMango(context); }));
    }
    ~ExperimentalWithCallbackMethod_DoubleStreamMango() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoubleStreamMango(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* DoubleStreamMango(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::TestPackage::TestRequest, ::TestPackage::TestResponse>* DoubleStreamMango(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_TestSimple<ExperimentalWithCallbackMethod_TestClientStream<ExperimentalWithCallbackMethod_TestServerStream<ExperimentalWithCallbackMethod_TestDoubleStream<ExperimentalWithCallbackMethod_ServerStreamApple<ExperimentalWithCallbackMethod_ServerStreamPear<ExperimentalWithCallbackMethod_ServerStreamMango<ExperimentalWithCallbackMethod_DoubleStreamApple<ExperimentalWithCallbackMethod_DoubleStreamPear<ExperimentalWithCallbackMethod_DoubleStreamMango<Service > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_TestSimple<ExperimentalWithCallbackMethod_TestClientStream<ExperimentalWithCallbackMethod_TestServerStream<ExperimentalWithCallbackMethod_TestDoubleStream<ExperimentalWithCallbackMethod_ServerStreamApple<ExperimentalWithCallbackMethod_ServerStreamPear<ExperimentalWithCallbackMethod_ServerStreamMango<ExperimentalWithCallbackMethod_DoubleStreamApple<ExperimentalWithCallbackMethod_DoubleStreamPear<ExperimentalWithCallbackMethod_DoubleStreamMango<Service > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_TestSimple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TestSimple() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_TestSimple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestSimple(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::TestPackage::TestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TestClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TestClientStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_TestClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestClientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::TestPackage::TestRequest>* /*reader*/, ::TestPackage::TestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TestServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TestServerStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_TestServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestServerStream(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::grpc::ServerWriter< ::TestPackage::TestResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TestDoubleStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TestDoubleStream() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_TestDoubleStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestDoubleStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerStreamApple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerStreamApple() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ServerStreamApple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamApple(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerStreamPear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerStreamPear() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ServerStreamPear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamPear(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::grpc::ServerWriter< ::TestPackage::TestResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerStreamMango : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerStreamMango() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ServerStreamMango() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamMango(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::grpc::ServerWriter< ::TestPackage::TestResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoubleStreamApple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoubleStreamApple() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DoubleStreamApple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoubleStreamApple(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoubleStreamPear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoubleStreamPear() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DoubleStreamPear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoubleStreamPear(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoubleStreamMango : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoubleStreamMango() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_DoubleStreamMango() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoubleStreamMango(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_TestSimple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TestSimple() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_TestSimple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestSimple(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::TestPackage::TestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestSimple(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TestClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TestClientStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_TestClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestClientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::TestPackage::TestRequest>* /*reader*/, ::TestPackage::TestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestClientStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TestServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TestServerStream() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_TestServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestServerStream(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::grpc::ServerWriter< ::TestPackage::TestResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestServerStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TestDoubleStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TestDoubleStream() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_TestDoubleStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestDoubleStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestDoubleStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerStreamApple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerStreamApple() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ServerStreamApple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamApple(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStreamApple(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerStreamPear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerStreamPear() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ServerStreamPear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamPear(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::grpc::ServerWriter< ::TestPackage::TestResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStreamPear(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerStreamMango : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerStreamMango() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ServerStreamMango() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamMango(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::grpc::ServerWriter< ::TestPackage::TestResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStreamMango(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoubleStreamApple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoubleStreamApple() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DoubleStreamApple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoubleStreamApple(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoubleStreamApple(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(7, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoubleStreamPear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoubleStreamPear() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_DoubleStreamPear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoubleStreamPear(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoubleStreamPear(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(8, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoubleStreamMango : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoubleStreamMango() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_DoubleStreamMango() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoubleStreamMango(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoubleStreamMango(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(9, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TestSimple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TestSimple() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TestSimple(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TestSimple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestSimple(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::TestPackage::TestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TestSimple(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TestSimple(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TestClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TestClientStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->TestClientStream(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TestClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestClientStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::TestPackage::TestRequest>* /*reader*/, ::TestPackage::TestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* TestClientStream(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* TestClientStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TestServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TestServerStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->TestServerStream(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_TestServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestServerStream(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::grpc::ServerWriter< ::TestPackage::TestResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* TestServerStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* TestServerStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TestDoubleStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TestDoubleStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->TestDoubleStream(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_TestDoubleStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestDoubleStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* TestDoubleStream(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* TestDoubleStream(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ServerStreamApple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ServerStreamApple() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->ServerStreamApple(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_ServerStreamApple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamApple(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ServerStreamApple(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ServerStreamApple(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ServerStreamPear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ServerStreamPear() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->ServerStreamPear(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_ServerStreamPear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamPear(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::grpc::ServerWriter< ::TestPackage::TestResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ServerStreamPear(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* ServerStreamPear(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ServerStreamMango : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ServerStreamMango() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->ServerStreamMango(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_ServerStreamMango() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamMango(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::grpc::ServerWriter< ::TestPackage::TestResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ServerStreamMango(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* ServerStreamMango(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoubleStreamApple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoubleStreamApple() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->DoubleStreamApple(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoubleStreamApple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoubleStreamApple(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* DoubleStreamApple(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* DoubleStreamApple(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoubleStreamPear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoubleStreamPear() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->DoubleStreamPear(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoubleStreamPear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoubleStreamPear(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* DoubleStreamPear(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* DoubleStreamPear(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoubleStreamMango : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoubleStreamMango() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->DoubleStreamMango(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoubleStreamMango() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoubleStreamMango(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::TestPackage::TestResponse, ::TestPackage::TestRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* DoubleStreamMango(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* DoubleStreamMango(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TestSimple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TestSimple() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TestPackage::TestRequest, ::TestPackage::TestResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TestPackage::TestRequest, ::TestPackage::TestResponse>* streamer) {
                       return this->StreamedTestSimple(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TestSimple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TestSimple(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::TestPackage::TestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTestSimple(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TestPackage::TestRequest,::TestPackage::TestResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_TestSimple<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_TestServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_TestServerStream() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::TestPackage::TestRequest, ::TestPackage::TestResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::TestPackage::TestRequest, ::TestPackage::TestResponse>* streamer) {
                       return this->StreamedTestServerStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_TestServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TestServerStream(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::grpc::ServerWriter< ::TestPackage::TestResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedTestServerStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::TestPackage::TestRequest,::TestPackage::TestResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ServerStreamPear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ServerStreamPear() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::TestPackage::TestRequest, ::TestPackage::TestResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::TestPackage::TestRequest, ::TestPackage::TestResponse>* streamer) {
                       return this->StreamedServerStreamPear(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ServerStreamPear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerStreamPear(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::grpc::ServerWriter< ::TestPackage::TestResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedServerStreamPear(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::TestPackage::TestRequest,::TestPackage::TestResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ServerStreamMango : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ServerStreamMango() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::TestPackage::TestRequest, ::TestPackage::TestResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::TestPackage::TestRequest, ::TestPackage::TestResponse>* streamer) {
                       return this->StreamedServerStreamMango(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ServerStreamMango() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerStreamMango(::grpc::ServerContext* /*context*/, const ::TestPackage::TestRequest* /*request*/, ::grpc::ServerWriter< ::TestPackage::TestResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedServerStreamMango(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::TestPackage::TestRequest,::TestPackage::TestResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_TestServerStream<WithSplitStreamingMethod_ServerStreamPear<WithSplitStreamingMethod_ServerStreamMango<Service > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_TestSimple<WithSplitStreamingMethod_TestServerStream<WithSplitStreamingMethod_ServerStreamPear<WithSplitStreamingMethod_ServerStreamMango<Service > > > > StreamedService;
};

}  // namespace TestPackage


#endif  // GRPC_test_2eproto__INCLUDED
